Life Cycle method:
Constructor 
render



[content visible on screen]
componentDidMount
USe : Initial Data Loading, only required one time to call the function


[sit and wait for updates]
componentDidUpdate
Use: Component is updated for each reason. 

[sit and wait until this component is not longer shown]
componentWillUnmount
Use : We're about to remove component, Good place to do cleanup



Other Methods: 
shouldComponentUpdate
getDerivedStateFromProps
getSnapshotBeforeUpdate



Redux Cycle: 

Actual:                     Action Creator              -> Action   -> Dispactch     -> Reducers    -> State

According to Policy Cycle : Person dropping of the form -> the form -> form receiver -> Departments -> Compiled department date


General Data Loading With Redux  :

1. Component gets rendered onto the screen
2. Component's 'componentDidMount' lifecycle method gets called
3. We call action Creator from 'componentDidMount'

4. Action Creator runs code to make an API request
5. API responds with Data
6. Action Creator returns an 'action' with the fetched data on the 'payload' property

7. Some reducers sees the action, returns the data off the 'payload'
8. because we generated some new state object, redux/react-redux cause our React app to be rendered

